#!/usr/bin/env bash
# Pull and push on a Git repository but only if it has a valid remote and state is clean.
# This does a job similar to git sync but is more suitable for automated envs.

# usage: git-sync <path-to-parent-dir> (optional)

# Utils
# text formatting 
_reset="\e[0;0m"
_yellow="\e[1;33m"
_blue="\e[1;34m"
_strong="\e[1;39m"

# Main
# change dir to inputted path if valid
if [ -d "$1" ]; then
  cd "$1" || exit
fi

# get repo name
path="$(pwd)"
repo="${path##/*/}"

# Check before acting
_check() {
  # check if repo has remotes
  [ "$(git remote | wc -l)" == 0 ] && return 1

  # TODO: check if branch is main/master otherwise only fetch

  # check if repo is in a dirty state
  # NOTE: it may be necessary to run git diff first to ensure the index is up to date
  git diff --quiet; git diff-index --quiet HEAD -- || return 1
  return 0
}

# Pull changes
_pull() {
  # TODO: Don't fetch all in shallow repos
  # NOTE: Fetching all is important to fetch upstream commits on forks.
  git pull --all --ff-only
}

# Push changes
_push() {
  git push
}

printf "${_strong}Working on ${_yellow}%s${_reset}\n" "$repo"
_check && _pull && _push
printf "${_strong}Done on ${_blue}%s${_reset}\n\n" "$repo"
