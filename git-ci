#!/bin/sh
# Pull and push on a Git repository but only if it makes sense.
# This does a job similar to git sync but smarter and more suitable for automated envs.

# usage: git-sync <path-to-parent-dir> (optional)

# Logging 
# shellcheck disable=2059

# is it running under systemd?
if [ "$TERM" = "dumb" ]; then
  _log_emerg="<0>%s\n" # red
  _log_alert="<1>%s\n"
  _log_crit="<2>%s\n"
  _log_error="<3>%s\n"
  _log_warning="<4>%s\n" # yellow
  _log_notice="<5>%s\n" # white
  _log_info="<6>%s\n"
  _log_debug="<7>%s\n" # muted 

else
  # formatting escape codes
  _fmt_clear="\e[0;0m"
  _fmt_bold="\e[1;0m"
  _fmt_red="\e[1;31m"
  _fmt_yellow="\e[1;33m"
  _fmt_blue="\e[1;34m"
  _fmt_gray="\e[1;30m"

  # log levels strings (systemd convention)
  _log_emerg="${_fmt_red}EMERGENCY: %s${_fmt_clear}\n"
  _log_alert="${_fmt_red}ALERT: %s${_fmt_clear}\n"
  _log_crit="${_fmt_red}CRITICAL: %s${_fmt_clear}\n"
  _log_error="${_fmt_red}ERROR: %s${_fmt_clear}\n"
  _log_warning="${_fmt_yellow}WARNING: %s${_fmt_clear}\n"
  _log_notice="${_fmt_bold}NOTICE: %s${_fmt_clear}\n"
  _log_info="${_fmt_clear}INFO: %s\n${_fmt_clear}\n"
  _log_debug="${_fmt_gray}DEBUG: %s${_fmt_clear}\n"
fi

# Main
# change dir to inputted path if valid
if [ -d "$1" ]; then
  cd "$1" || exit
fi

# get repo name
_path="$(pwd)"
_repo_name="${_path##/*/}"
_repo_root=$(git rev-parse --show-toplevel 2>/dev/null)

# Check before acting
_check() {
  if [ "$(git remote | wc -l)" = 0 ]; then
    printf "$_log_error" "Repository has no remotes."
    exit 1
  fi

  # NOTE: it may be necessary to run git diff first to ensure the index is up to date
  if ! (git diff --quiet; git diff-index --quiet HEAD --) ; then
    printf "$_log_error" "Repository is in a dirty state."
    exit 1
  fi
}

# Pull changes
_pull() {
  if git rev-parse --is-shallow-repository >/dev/null; then
    printf "$_log_info" "Repository is shallow."
    git pull --ff-only --rebase
  else
    # NOTE: Fetching all is important to fetch upstream commits on forks.
    git pull --all --ff-only --rebase
  fi
}

# Push changes
_push() {
  _branch=$(git symbolic-ref --short HEAD)
  if ! [ "$_branch" = "main" ] && ! [ "$_branch" = "master" ]; then
    printf "$_log_warning" "Current branch is not main or master."
    return 1 
  fi

  if [ "$(git rev-list HEAD@\{upstream\}..HEAD | wc -l)" = 0 ]; then
    printf "$_log_info" "No commits to push."
    return 1
  fi

  # NOTE: Authentication is completely server-side and Git can't know if user
  # is allowed to push. A workaround to prevent pushes is to set 'pushurl' to
  # an invalid value.

  if git remote | grep gerrit; then
    printf "$_log_info" "Gerrit repository. Skip push."
    return 1
  fi

  git push
}

# TODO: Move start/end logging to git-all
printf "${_fmt_bold}%s: ${_fmt_blue}START${_fmt_clear}\n" "$_repo_name"
_check
_pull
_push
printf "${_fmt_bold}%s: ${_fmt_blue}END${_fmt_clear}\n" "$_repo_name"
