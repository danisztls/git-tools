#!/bin/sh
# Collect garbage in a Git repository reducing its size.
# Expire the reflog and prune Git and old objects.

# usage: git-lipo <path-to-repo> (optional)

# Utils
# text formatting 
_reset="\e[0;0m"
_red="\e[1;31m"
_green="\e[1;32m"
_yellow="\e[1;33m"
_blue="\e[1;34m"
_strong="\e[1;39m"

# dependencies
_command="du"
if [ ! "$(command -v "$_command")" ]; then
  printf "${_red}Required dependency not found: ${_strong}%s${_reset}\n" "$_command"
  exit 1
fi

# Main
# cd to repo if valid path is inputted
if [ -d "$1/.git" ]; then
  cd "$1" || exit
fi

_cleanRepo() {
  # check for repo at current path
  _repo_root=$(git rev-parse --show-toplevel 2>/dev/null) || exit

  # check database validity
  git fsck

  # NOTE: Does this make a difference. I think 'git gc prune=now' also does this
  git reflog expire --expire-unreachable=now --all

  # clean old objects 
  [ -f "_repo_root/.git/lfs" ] && git-lfs prune
  git gc --prune=now --aggressive
}

_printResults() {
  _saved="$1"

  # shellcheck disable=SC2086
  # transform space saved to human readable format
  if [ $_saved -lt 1024 ]; then
    _format="B"
  elif [ $_saved -gt 1023 ] && [ $_saved -lt 1048576 ]; then
    _saved=$((_saved / 1024))
    _format="KB"
  elif [ $_saved -gt 1048575 ] && [ $_saved -lt 1073741824 ]; then
    _saved=$((_saved / 1048576))
    _format="MB"
  elif [ $_saved -gt 1073741823 ] && [ $_saved -lt 1099511627776 ]; then
    _saved=$((_saved / 1073741824))
    _format="GB"
  else
    _format="?"
    echo "Size is bigger than a gigabyte. What the heck are you storing here?"
  fi

  # TODO: Calculate value as percentage of total.

  printf "\nDisk space saved: ${_green}%s${_reset}\n" "${_saved}${_format}"
}

# calculate space saved in bytes
_sizeBefore=$(du -bd 0 | cut -f1)

_cleanRepo

_sizeAfter=$(du -bd 0 | cut -f1)

_printResults $((_sizeBefore - _sizeAfter))
