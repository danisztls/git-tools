#!/usr/bin/env bash
# Run a command on all Git repos under a path

# logging
# shellcheck disable=2059

if [ "$TERM" = "dumb" ]; then
  # systemd
  _log_emerg="<0>%s\n" # red
  _log_alert="<1>%s\n"
  _log_crit="<2>%s\n"
  _log_error="<3>%s\n"
  _log_warning="<4>%s\n" # yellow
  _log_notice="<5>%s\n" # white
  _log_info="<6>%s\n"
  _log_debug="<7>%s\n" # muted 

else
  # interactive shell
  _fmt_clear="\e[0;0m"
  _fmt_bold="\e[1;0m"
  _fmt_red="\e[1;31m"
  _fmt_yellow="\e[1;33m"
  _fmt_blue="\e[1;34m"
  _fmt_gray="\e[1;30m"
  _log_emerg="${_fmt_red}EMERGENCY: %s${_fmt_clear}\n"
  _log_alert="${_fmt_red}ALERT: %s${_fmt_clear}\n"
  _log_crit="${_fmt_red}CRITICAL: %s${_fmt_clear}\n"
  _log_error="${_fmt_red}ERROR: %s${_fmt_clear}\n\n"
  _log_warning="${_fmt_yellow}WARNING: %s${_fmt_clear}\n"
  _log_notice="${_fmt_bold}NOTICE: %s${_fmt_clear}\n"
  _log_info="${_fmt_clear}INFO: %s\n${_fmt_clear}\n"
  _log_debug="${_fmt_gray}DEBUG: %s${_fmt_clear}\n"
fi

# check args
if ! [ "$#" -ge 2 ]; then
  printf "$_log_error" "Missing arguments."
  printf "$_log_info" "Check usage: git-all <path-to-parent-dir> <command> <command-args>\n"
  exit 1
fi

_path="$1"
_command="${*:2}" # 2nd to nth

# change dir to inputted path if valid
if [ -d "$_path" ]; then
  cd "$_path" || exit
fi

_queue() {
  local _repo _path

  _repo="$1"
  _path="${_repo%.git/}"
  _repo_name="${_path##/*/}"

  # run one by one
  # sem -j 1 "cd $_path; $_command"

  # run max of cpu cores
  # sem -j+0 "cd $_path; $_command"

  # run n in parallel
  # NOTE: GitHub limit is 4 simultaneous connections
  # sem -j 4 "$_command" "$path"
  sem --jobs 4 \
    cd "$_path";\
    printf "$_log_info" "START: $_repo_name";\
    $_command;\
    printf "\n$_log_info" "END: $_repo_name"
}

if [ -f "$GIT_ALL_IGNORE_FILE" ]; then
  mapfile -t repos < <(\
                       fd -t d '\.git$' \
                       --unrestricted \
                       --exclude "**/*cache*" \
                       --exclude "**/Trash/" \
                       --ignore-file "$GIT_ALL_IGNORE_FILE" \
                      )
else
  mapfile -t repos < <(\
                       fd -t d '\.git$' \
                       --unrestricted \
                       --exclude "**/*cache*" \
                       --exclude "**/Trash/" \
                      )
fi

for _repo in "${repos[@]}"; do
  _queue "$_repo"
done

# wait for tasks to finish
sem --wait
